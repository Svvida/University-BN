// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(UniversityContext))]
    [Migration("20240623143204_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DegreePath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("Degree_Paths", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DegreeProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Degree_Courses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DegreeProgramCourse", b =>
                {
                    b.Property<Guid>("ProgramId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProgramId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Degree_Courses_Subjects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ConsentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfAddmission")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ConsentId")
                        .IsUnique();

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EmployeeAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Employees_Addresses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EmployeeConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("PermissionForDataProcessing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PermissionForPhoto")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Employees_Consents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DegreePathId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DegreePathId");

                    b.ToTable("Modules", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ModuleCourse", b =>
                {
                    b.Property<Guid>("ModuleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.HasKey("ModuleId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules_Subjects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ConsentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfAddmission")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ConsentId")
                        .IsUnique();

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StudentAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Students_Addresses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StudentConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("PermissionForDataProcessing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PermissionForPhoto")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Students_Consents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users_Accounts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAccountRole", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users_Accounts_Roles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DegreePath", b =>
                {
                    b.HasOne("Domain.Entities.DegreeProgram", "Program")
                        .WithMany("Paths")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Domain.Entities.DegreeProgramCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("ProgramCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DegreeProgram", "Program")
                        .WithMany("ProgramCourses")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("Domain.Entities.Employee", "AccountId");

                    b.HasOne("Domain.Entities.EmployeeAddress", "Address")
                        .WithOne("Employee")
                        .HasForeignKey("Domain.Entities.Employee", "AddressId");

                    b.HasOne("Domain.Entities.EmployeeConsent", "Consent")
                        .WithOne("Employee")
                        .HasForeignKey("Domain.Entities.Employee", "ConsentId");

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("Domain.Entities.Module", b =>
                {
                    b.HasOne("Domain.Entities.DegreePath", "Path")
                        .WithMany("Modules")
                        .HasForeignKey("DegreePathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Path");
                });

            modelBuilder.Entity("Domain.Entities.ModuleCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("ModuleCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Module", "Module")
                        .WithMany("ModuleCourses")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "Account")
                        .WithOne("Student")
                        .HasForeignKey("Domain.Entities.Student", "AccountId");

                    b.HasOne("Domain.Entities.StudentAddress", "Address")
                        .WithOne("Student")
                        .HasForeignKey("Domain.Entities.Student", "AddressId");

                    b.HasOne("Domain.Entities.StudentConsent", "Consent")
                        .WithOne("Student")
                        .HasForeignKey("Domain.Entities.Student", "ConsentId");

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("Domain.Entities.UserAccountRole", b =>
                {
                    b.HasOne("Domain.Entities.UserAccount", "Account")
                        .WithMany("UserAccountRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserAccountRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("ModuleCourses");

                    b.Navigation("ProgramCourses");
                });

            modelBuilder.Entity("Domain.Entities.DegreePath", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Domain.Entities.DegreeProgram", b =>
                {
                    b.Navigation("Paths");

                    b.Navigation("ProgramCourses");
                });

            modelBuilder.Entity("Domain.Entities.EmployeeAddress", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.EmployeeConsent", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.Module", b =>
                {
                    b.Navigation("ModuleCourses");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("UserAccountRoles");
                });

            modelBuilder.Entity("Domain.Entities.StudentAddress", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.StudentConsent", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.UserAccount", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("Student");

                    b.Navigation("UserAccountRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
